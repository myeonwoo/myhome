<?php
// $Id$

/**
 * @file
 * Example module to demonstrate using the menu system.
 * 
 * For more information about hook_menu(), see:
 * http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_menu/7
 *
 * In this file, we are demonstrating how hook_menu_alter() works and how to implement it.
 */

/**
 * Implements hook_menu().
 */
function oep_pages_menu() {
  $items['ec/pages'] = array(
    'title' => '',
    'description' => 'Menu system example that returns a string.',
    'page callback' => 'ec_string',
    'access callback' => TRUE,
  );
  $items['ec/pages/default'] = array(
    'title' => 'Message',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  $items['ec/pages/by-state'] = array(
    'title' => 'Articles By State',
    'description' => 'Menu system example using a render array.',
    'page callback' => 'by_article_state',
  	'page arguments' => array('not-assigned'),
    'access arguments' => array('access content'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $items['ec/pages/by-state/not-assigned'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Not assigned',
  	'weight' => 2,
  );
  $items['ec/pages/by-state/being-written'] = array(
    'title' => 'Written',
    'description' => 'Demonstrating secondary tabs.',
    'page callback' => 'by_article_state',
  	'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  	'weight' => 3,
  );
  $items['ec/pages/by-state/not-started'] = array(
  		'title' => 'Not started',
  		'description' => 'Demonstrating secondary tabs.',
  		'page callback' => 'by_article_state',
  		'page arguments' => array(3),
  		'access callback' => TRUE,
  		'type' => MENU_LOCAL_TASK,
  		'weight' => 4,
  );
  $items['ec/pages/by-state/review'] = array(
    'title' => 'Assigned to Reviewers',
    'description' => 'Demonstrating secondary tabs.',
    'page callback' => 'by_article_state',
    'page arguments' => array('assigned_review'),
  	'page arguments' => array(3),
  	'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  	'weight' => 5,
  );
  
  $items['ec/pages/by-state/return-to-revision'] = array(
  		'title' => 'Return to Revision',
  		'description' => 'Demonstrating secondary tabs.',
  		'page callback' => 'by_article_state',
  		'page arguments' => array(3),
  		'access callback' => TRUE,
  		'type' => MENU_LOCAL_TASK,
  		'weight' => 6,
  );
  
  $items['ec/pages/by-state-alternative'] = array(
  		//'title' => 'Alternative',
  		//'description' => 'Menu system example using a render array.',
  		//'page callback' => 'ec_string',
  		//'access arguments' => array('access content'),
      
  		'type' => MENU_LOCAL_TASK,
  		'weight' => 3,
      
      'title' => 'Alternative',
  		'description' => 'Menu system example using a render array.',
  		'page callback' => 'drupal_get_form',
      'page arguments' => array('ajax_ex1'),
      'access callback' => TRUE,
      
  );
  
  $items['ec/pages/file-manager'] = array(
  		'title' => 'File Manager',
  		'description' => 'File Manager.',
  		'page callback' => 'output',
  		'page arguments' => array('File Manager will be active soon.'),
  		'access arguments' => array('access content'),
  		'weight' => 4,
  		'type' => MENU_LOCAL_TASK,
  );
  
  $items['ec/pages/users'] = array(
  		'title' => 'Users',
  		'description' => 'Search User.',
  		'page callback' => 'drupal_get_form',
  		'access callback' => TRUE,
  		'page arguments' => array('ajax_user'),
  		'access arguments' => array('access content'),
  		'weight' => 5,
  		'type' => MENU_LOCAL_TASK,
  );
  
  $items['ec/edit/user'] = array(
  		'title' => 'Edit Author',
  		'description' => 'Search User.',
  		'page callback' => 'output',
      'page arguments' => array('EC can edit Author.'),
  		'access callback' => TRUE,
  );
  
  //add_more_items(items);
  $items['article/%/revision'] = array(
  		'title' => 'title',
  		'description' => 'List of Revisions.',
  		'page callback' => 'article_revision',
  		'page arguments' => array(1),
  		'access argument' => array('access content'),
  		//'access callback' => TRUE,
  );
  
  $items['article/%/revisions'] = array(
  		'title' => 'Revision History',
  		'description' => 'Article Revision History.',
  		'page callback' => 'oep_article_revisions',
  		'page arguments' => array(1),
  		'access arguments' => array('access content'),
  );
  $items['article/%/revision/%'] = array(
  		'title' => 'Article Revision',
  		'description' => 'Article Revision.',
  		'page callback' => 'oep_article_revision',
  		'page arguments' => array(1,3),
  		'access arguments' => array('access content'),
  );
  
  return $items;
}

function add_more_items(&$items){
	$items['article/%/revision'] = array(
			'title' => 'title',
			'description' => 'List of Revisions.',
  		'page callback' => 'article_revision',
      'page arguments' => array(1),
			'access argument' => array('access content'),
  		//'access callback' => TRUE,
	);
}

/**
 * Menu callback; page callback returning an argument.
 */
function article_revision($arg1) {
	$build['argument_paragraph'] = array(
			'#type' => 'markup',
			'#markup' => '<p>' . t('The argument passed was @arg1.', array('@arg1' => $arg1)) . '</p>',
	);

	return $build;
}

function ajax_ex1($form, &$form_state) {
  
  $form['filter_params'] = array(
    '#title' => 'Filters',
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  // Added AJAX callback.
  $form['filter_params']['article_status'] = array(
    '#title' => t('Article Status'),
    '#type' => 'select',
    '#options' => drupal_map_assoc(array('', t('new_entry'), t('assigned_entry'), t('in_process'))),
    '#ajax' => array(
      'callback' => 'ajax_callback',
      'wrapper' => 'input_article_status_verify_wrapper_edit',
     ),
  );
  
  // Setting an empty element with a wrapper to be populated.
  $form['filter_params']['article_status_verify'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="input_article_status_verify_wrapper">',
    '#suffix' => '</div>',
  );
  
  $form['output'] = array(
  		'#type' => 'markup',
  		'#prefix' => '<div id="input_article_status_verify_wrapper_edit">',
      //'#markup'
  		'#suffix' => '</div>',
  );
  
  // When submitted, check for value of article_status, and populate article_status_verify.
  if (isset($form_state['values']['article_status'])) { // Fixed this line, was throwing an error in the original video code.
    
    $sql = "select C.nid
            from (
              select A.nid, B.state
              from (select nid, max(stamp) as stamp from {workbench_moderation_node_history} group by nid) A
              left join {workbench_moderation_node_history} B
              on A.nid=B.nid and A.stamp=B.stamp) C
            where C.state=:state";
    $r = db_query($sql, array(':state' => $form_state['values']['article_status']));
    
    $ids = array();
    foreach ($r as $row) {
      $ids[] = $row->nid;
    }
    
    $nodes = node_load_multiple($ids);
    
    $output = '<br />';
    $headers = array(t('Title'), t('From State'), t('Current State'));
    foreach ($nodes as $node){
      $rows[] = array(l(t($node->title),t($node->path['source'])), t($node->workbench_moderation['current']->from_state), t($node->workbench_moderation['current']->state));
    }
    $output .= theme('table', array('header' => $headers, 'rows' => $rows));
    
    $form['output']['#type'] = 'markup';
    //$form['output']['#markup'] = t('You selected @article_status', array('@article_status' => $form_state['values']['article_status']));
    $form['output']['#markup'] = $output;
  }

  return $form;
}

//function ajax_callback($form, $form_state) {
function ajax_callback($form, $form_state) {
	return $form['output'];
}

function ajax_user($form, &$form_state) {
  
  $form['filter_params'] = array(
    '#title' => 'Filters',
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $sql = "select name from {role} order by weight";
  $result = db_query($sql);
  $options = array();
  foreach ( $result as $value ) {
    $options[t($value->name)] = t($value->name);
  }
  
  // Added AJAX callback.
  $form['filter_params']['user_role'] = array(
    '#title' => t('User Role'),
    '#type' => 'select',
    //'#options' => drupal_map_assoc(array(t('Not Selected'), t('administrator'), t('editor coordinator'), t('author'))),
    '#options' => $options,
    '#ajax' => array(
      'callback' => 'ajax_callback_user',
      'wrapper' => 'user_wrapper',
     ),
  );
  
  // Setting an empty element with a wrapper to be populated.
  $form['filter_params']['article_status_verify'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="input_article_status_verify_wrapper">',
    '#suffix' => '</div>',
  );
  
  $form['output'] = array(
  		'#type' => 'markup',
  		'#prefix' => '<div id="user_wrapper">',
      //'#markup'
  		'#suffix' => '</div>',
  );
  
  // When submitted, check for value of user_role, and populate article_status_verify.
  if (isset($form_state['values']['user_role'])) { 
    $sql = "select name, mail
            from {users} U
            right join (select uid 
                        from {users_roles} U
                        right join (select rid from {role} where name=:role) R
                        on U.rid = R.rid) A
            on U.uid=A.uid";
    $result = db_query($sql, array(':role' => $form_state['values']['user_role']));
    
    $output = '<br />';
    $headers = array(t('User Name'), t('Email'));
    foreach ($result as $user){
      $rows[] = array( t($user->name), t($user->mail) );
    }
    $output .= theme('table', array('header' => $headers, 'rows' => $rows));
    
    $form['output']['#type'] = 'markup';
    $form['output']['#markup'] = $output;
  }

  return $form;
}

function ajax_callback_user($form, $form_state) {
	return $form['output'];
}

/**
 * Menu callback; page callback returning a simple string.
 */
function ec_string() {
  $output = '
    <p>Hello Amy. <br />
    These Pages are the interface that you can work with.</p>';
  
  $output .= theme('item_list', array(
    'title' => 'List that you can do.',
    'items' => array(
      '1. Filter out article based on article status.',
    ))
  );

  return $output;
}

function output($in){
	$output = '<p>'.$in.'</p>';
	
	return $output;
}

/**
 * Menu callback; page callback returning a render array.
 */
function by_article_state($arg){
	switch ($arg){
		case 'not-assigned':
			$output = pages_article_by_state('new_entry');
			break;
		case 'being-written':
			$output = pages_article_by_state('assigned_entry');
			break;
		default:
			$output = ec_string();
			
	}
	return $output;
}

function pages_unassigned_articles() {
	$sql = "select C.nid
					from (
					  select A.nid, B.state
					  from (select nid, max(stamp) as stamp from {workbench_moderation_node_history} group by nid) A
					  left join {workbench_moderation_node_history} B
					  on A.nid=B.nid and A.stamp=B.stamp) C
					where C.state=:state";
	$r = db_query($sql, array(':state' => 'new_entry'));
	
	$ids = array();
	foreach ($r as $row) {
		$ids[] = $row->nid;
	}
	
	$nodes = node_load_multiple($ids);
	
	$output = '<br />';
	$headers = array(t('Title'), t('From State'), t('Current State'));
	foreach ($nodes as $node){
		$rows[] = array(l(t($node->title),t($node->path['source'])), t($node->workbench_moderation['current']->from_state), t($node->workbench_moderation['current']->state));
	}
	$output .= theme('table', array('header' => $headers, 'rows' => $rows));
	
  $build = array(
    'string_paragraph' => array(
      '#type' => 'markup',
      '#markup' => '<p>Pages can be returned as strings.</p>',
    ),
    'render_array_paragraph' => array(
      '#type' => 'markup',
      '#markup' => '<p>Pages can be returned as <em>render arrays<em>.</p>',
    ),
    'why_render_arrays' => array(
      '#items' => array('They allow content to be modified as an array.', 'Arrays are a lot easier to modify than HTML.'),
      '#title' => 'Render arrays are better because...',
      '#theme' => 'item_list',
    ),
  );

  return $output;
}

function pages_article_by_state($state) {
	$sql = "select C.nid
		from (
		select A.nid, B.state
		from (select nid, max(stamp) as stamp from {workbench_moderation_node_history} group by nid) A
		left join {workbench_moderation_node_history} B
		on A.nid=B.nid and A.stamp=B.stamp) C
		where C.state=:state";
	$r = db_query($sql, array(':state' => $state));

	$ids = array();
	foreach ($r as $row) {
		$ids[] = $row->nid;
	}

	$nodes = node_load_multiple($ids);

	$output = '<br />';
	$headers = array(t('Title'), t('From State'), t('Current State'));
	foreach ($nodes as $node){
		$rows[] = array(l(t($node->title),t($node->path['source'])), t($node->workbench_moderation['current']->from_state), t($node->workbench_moderation['current']->state));
	}
	$output .= theme('table', array('header' => $headers, 'rows' => $rows));

	$build = array(
			'string_paragraph' => array(
					'#type' => 'markup',
					'#markup' => '<p>Pages can be returned as strings.</p>',
			),
			'render_array_paragraph' => array(
					'#type' => 'markup',
					'#markup' => '<p>Pages can be returned as <em>render arrays<em>.</p>',
			),
			'why_render_arrays' => array(
					'#items' => array('They allow content to be modified as an array.', 'Arrays are a lot easier to modify than HTML.'),
					'#title' => 'Render arrays are better because...',
					'#theme' => 'item_list',
			),
	);

	return $output;
}

/**
 * Menu callback; page callback returning an argument.
 */
function oep_article_revisions($nid) {
	
	$sql = "select A.vid, A.timestamp, A.uid, U.name, U.mail
					from (select A.vid, timestamp, uid
					      from (select revision_id as vid from field_revision_body where entity_id=$nid order by revision_id) A
					      left join node_revision N
					      on A.vid = N.vid) A
					left join users U
					on A.uid=U.uid";
	$result = db_query($sql);
	
	$headers = array(t(''), t('timestamp'), t('uid'), t('name'), t('mail'));
	foreach ($result as $row){
		$rows[] = array( 
				//t($row->vid),
				l('View', "article/$nid/revision/".t($row->vid)),
				//t($row->timestamp),
				t(format_date($row->timestamp, 'custom', 'Y-m-d H:i')),
				t($row->uid),
				t($row->name),
				t($row->mail),);
	}
	$output = theme('table', array('header' => $headers, 'rows' => $rows));

  return $output;
}

function oep_article_revision($nid, $vid) {

	$sql = "select title from node_revision where nid=$nid and vid<=$vid order by vid desc limit 1";
	$result = db_query($sql);
	$row = $result->fetchAssoc();
	$output['title'] = array(
			'#type' => 'markup',
			'#prefix' => '<div id="article_title"> <h2>Title</h2>',
			'#markup' => '<p>' . $row['title'] . '</p>',
			'#suffix' => '</div>',
	);
	
	$sql = "select field_deadline_value from field_revision_field_deadline where entity_id=$nid and revision_id<=$vid order by revision_id desc limit 1";
	$result = db_query($sql);
	$row = $result->fetchAssoc();
	$output['deadline'] = array(
			'#type' => 'markup',
			'#prefix' => '<div id="article_deadline"> <h2>Deadline</h2>',
			'#markup' => '<p>' . $row['title'] . '</p>',
			'#suffix' => '</div>',
	);
	
	$sql = "select body_value from field_revision_body where entity_id=$nid and revision_id<=$vid order by revision_id desc limit 1";
	$result = db_query($sql);
	$row = $result->fetchAssoc();
	
	$output['body'] = array(
			'#type' => 'markup',
			'#prefix' => '<div id="article_body"> <h2>Body</h2>',
			'#markup' => '<p>' . $row['body_value'] . '</p>',
			'#suffix' => '</div>',
	);
	
	$build['argument_paragraph'] = array(
			'#type' => 'markup',
			'#markup' => '<p>' . t('The node id was @arg1.', array('@arg1' => $nid)) . '</p>'
	);

	return $output;
}


/**
 * Example of passing an argument to be loaded as an object.
 */
function pages_object_load($id) {
  return array(
    'id' => $id,
    'times_two' => $id * 2,
    'additional_info' => 'Some additonal information about this object loaded from the database',
  );
}


/**
 * Return a default for the pages_object_load() function.
 */
function pages_object_to_arg($id) {
  return empty($id) ? 42 : $id;
}


/**
 * Example of using a argument_load() function to load additional information into
 * argument before passing to page callback.
 */
function pages_object($object) {
  return array(
    '#type' => 'markup',
    '#markup' => t('The id is @id and that times 2 is @times_two.', array('@id' => $object['id'], '@times_two' => $object['times_two'])),
  );
}


/**
 * Example of a page title callback function.
 */
function pages_title_callback($arg) {
  return 'There is an argument in this title: ' . $arg;
}


/**
 * Implements hook_page_alter().
 *
 * Demonstrating specifically why it's good to return a render array instead
 * of a string.
 */
function pages_page_alter(&$page) {
  //$page['content']['system_main']['why_render_arrays']['#weight'] = -10;
}


/**
 * Implements hook_menu_alter().
 *
 * Changing the title of the content management page.
 */
function pages_menu_alter(&$items) {
  //$items['admin/content']['title'] = 'The Goods';
  //$items['admin/content']['page callback'] = 'pages_unassigned_articles';
}