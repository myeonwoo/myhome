<?php 
/**
 * Implements hook_node_submit().
 */
function oep_node_access_node_submit($node, $form, &$form_state) {
  // Decompose the selected menu parent option into 'menu_name' and 'plid', if
  // the form used the default parent selection widget.
  $arr = array(
    'node' => $node,
    'form' => $form,
    'form_state' => $form_state,
  );
  dsm($arr, 'oep_node_access_node_submit');
}
/**
 * Implements hook_node_validate().
 */
function oep_node_access_node_validate($node, $form, &$form_state) {
  $arr = array(
    'node' => $node,
    'form' => $form,
    'form_state' => $form_state,
  );
  dsm($arr, 'oep_node_access_node_validate');
}

/**
 * Implements hook_validate().
 */
function oep_node_access_validate($node, $form, &$form_state) {

  $arr = array(
    'node' => $node,
    'form' => $form,
    'form_state' => $form_state,
  );
  dsm($arr, 'oep_node_access_validate');
}
/**
 * Implements hook_form().
 */
function oep_node_access_form($node, &$form_state) {
  $arr = array(
    'node' => $node,
    'form_state' => $form_state,
  );
  dsm($arr, 'oep_node_access hook_form');
  
  $type = node_type_get_type($node);

  $form['selectbox'] = array(
    '#type' => 'select', 
    '#title' => t('Select box'), 
    '#default_value' => $node->selectbox, 
    '#options' => array(
      1 => 'Option A', 
      2 => 'Option B', 
      3 => 'Option C',
    ), 
    '#description' => t('Choose an option.'),
  );

  return $form;
}
/**
 * Implements hook_view().
 */
function oep_node_access_view($node, $view_mode) {
  $arr = array(
    'node' => $node,
    'view_mode' => $view_mode,
  );
  dsm($arr, 'oep_node_access hook_view');
  return $node;

  if ($view_mode == 'full' && node_is_page($node)) {
    $breadcrumb = array();
    $breadcrumb[] = l(t('Home'), NULL);
    $breadcrumb[] = l(t('Example'), 'example');
    $breadcrumb[] = l($node->field1, 'example/' . $node->field1);
    drupal_set_breadcrumb($breadcrumb);
  }

  $node->content['myfield'] = array(
    '#markup' => theme('mymodule_myfield', $node->myfield), 
    '#weight' => 1,
  );

}
/**
 * Implements hook_node_view().
 */
function oep_node_access_node_view($node, $view_mode, $langcode) {
  $node->content['my_additional_field'] = array(
    '#markup' => '<h1> Additional Field </h1><p> HELO </p>', 
    '#weight' => 10, 
  );
  $arr = array(
    'node' => $node,
    'view_mode' => $view_mode,
    'langcode' => $langcode,
  );
  dsm($arr, 'oep_node_access hook_node_view');
  return $node;
}
/**
 * Implements hook_node_access().
 *
 * For more info on how node access rights work, see:
 * http://api.drupal.org/api/drupal/modules--node--node.module/group/node_access/7
 *
 * For more info on this hook, see:
 * http://api.drupal.org/api/drupal/modules--node--node.api.php/function/hook_node_access/7
 *
 * Note that if we return NODE_ACCESS_ALLOW or NODE_ACCESS_DENY, that will
 * override any other access settings set by other modules.
 *
 * $op: create/delete/update/view
 */
function oep_node_access_node_access($node, $op, $account) {
  
	$vars = array();

	/* Filter out access control when the node is not node object **/
  if ( is_string($node) ) {
    return NODE_ACCESS_IGNORE;
  }
  
	/* Filter out access control when the node is not article **/
  $type = $node->type;
	if ( $type != 'article' ){
		return NODE_ACCESS_IGNORE;
	}
  
  /* set default access  */
  $my_access = NODE_ACCESS_DENY;
  
  switch ($op) {
    case 'view':
      $my_access = oep_article_view_access($node, $account);
      break;
    case 'update':
      $my_access = oep_article_update_access($node, $account);
      break;
    default:
      $my_access = NODE_ACCESS_DENY;
  }
  
  
  if ( $my_access != NODE_ACCESS_DENY) {
    dsm(array($node,$op,$account), 'my_access');
  } else {
    dsm(array($my_access),'my_access');
  }
	return $my_access;
  
	
	//NODE_ACCESS_ALLOW
	//NODE_ACCESS_IGNORE
	//return NODE_ACCESS_DENY;
}

function oep_article_view_access($node, $user){
  return NODE_ACCESS_ALLOW;
  $my_access = NODE_ACCESS_DENY;
  /* Check Editorial Coordinator case */
  if ( in_array("Editorial Coordinator", $user->roles) ) {
    $my_access = NODE_ACCESS_ALLOW;
  }
  /* Check author case */
  if ( $my_access == NODE_ACCESS_DENY && in_array("Author", $user->roles) ){
    $field_state = field_get_items('node', $node, 'field_state');
    $field_authors = field_get_items('node', $node, 'field_authors');
    $uid = $user->uid;
    
    $my_access = NODE_ACCESS_ALLOW;
    if ( in_array('Assigned Entry', $field_state[0]) == false) {
      $my_access = NODE_ACCESS_DENY;
    }
    
    if ( in_array($uid, $field_authors[0]) == false ) {
      $my_access = NODE_ACCESS_DENY;
    }
    
    $arr = array(
      'node' => $node,
      'field_state' => $field_state,
      'field_authors' => $field_authors,
    );
    dsm($arr, 'Author oep_article_view_access');
  }
  return $my_access;
}

function oep_article_create_access(&$node, &$user){
  $my_access = NODE_ACCESS_DENY;
  return $my_access;
}

function oep_article_update_access(&$node, &$user){
  $my_access = NODE_ACCESS_DENY;
  /* Check author case */
  if ( in_array("Editorial Coordinator", $user->roles) ) {
    $my_access = NODE_ACCESS_ALLOW;
  }
  /* Check author case */
  if ( $my_access == NODE_ACCESS_DENY && in_array("Author", $user->roles) ){
    $field_state = field_get_items('node', $node, 'field_state');
    $field_authors = field_get_items('node', $node, 'field_authors');
    $uid = $user->uid;
    
    $my_access = NODE_ACCESS_ALLOW;
    if ( in_array('Assigned Entry', $field_state[0]) == false) {
      $my_access = NODE_ACCESS_DENY;
    }
    
    if ( in_array($uid, $field_authors[0]) == false ) {
      $my_access = NODE_ACCESS_DENY;
    }
  }
  
  return $my_access;
}



/* deprecated
 * Author Role (article access control)
 */
function author_article_access(&$node, $op, $state){
	global $user;
	if ( in_array($state, array('published')) && in_array($op, array('view'))){
		return NODE_ACCESS_ALLOW;
	}
	
	$state_list = array('assigned_entry', 'in_progress', 'needs_review', 'reviewer_assigned', 'review_completed', 'assigned_revision', 'published', 'withdrawn_from_author');

	if ( in_array($state, array('assigned_entry','in_progress')) && in_array($op, array('update', 'view')) ){
		
		$access_uids = array();
		foreach ($node->field_authors as $elements){
			foreach ($elements as $value){
				if (isset($value['target_id'])){
					$access_uids[] = $value['target_id'];
				}
			}
		}
		if (in_array($user->uid, $access_uids)){
			return NODE_ACCESS_ALLOW;
		}
	}
	return NODE_ACCESS_DENY;
}